{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["// contentlayer.config.ts\nimport { defineDocumentType, makeSource } from 'contentlayer/source-files';\nimport remarkGfm from 'remark-gfm';\nimport rehypeSlug from 'rehype-slug';\nimport { visit } from 'unist-util-visit';\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `content/blog/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    excerpt: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    category: { type: 'string', required: true },\n    coverImage: { type: 'string', required: false },\n    tags: { type: 'list', of: { type: 'string' } },\n    author: { type: 'string' },\n    authorIcon: { type: 'string' }\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (post) => `/${post._raw.flattenedPath}`\n    }\n  }\n}));\n\nexport const Docs = defineDocumentType(() => ({\n  name: 'Docs',\n  filePathPattern: `content/docs/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    excerpt: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    subType: { type: 'string' },\n    category: { type: 'string', required: true },\n    tags: { type: 'string', required: true },\n    author: { type: 'string' }\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (post) => `/${post._raw.flattenedPath}`\n    }\n  }\n}));\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Post, Docs],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      () => (tree) => {\n        visit(tree, 'element', (node) => {\n          if (node.tagName === 'code' && node.data && node.data.meta) {\n            node.properties.meta = node.data.meta;\n          }\n        });\n      }\n    ]\n  }\n});\n"],
  "mappings": ";AACA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,eAAe;AACtB,OAAO,gBAAgB;AACvB,SAAS,aAAa;AAEf,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,UAAU,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC3C,YAAY,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC9C,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IAC7C,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,YAAY,EAAE,MAAM,SAAS;AAAA,EAC/B;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,IAAI,KAAK,KAAK,aAAa;AAAA,IAChD;AAAA,EACF;AACF,EAAE;AAEK,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,SAAS,EAAE,MAAM,SAAS;AAAA,IAC1B,UAAU,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC3C,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,QAAQ,EAAE,MAAM,SAAS;AAAA,EAC3B;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,IAAI,KAAK,KAAK,aAAa;AAAA,IAChD;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,IAAI;AAAA,EAC1B,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA,MAAM,CAAC,SAAS;AACd,cAAM,MAAM,WAAW,CAAC,SAAS;AAC/B,cAAI,KAAK,YAAY,UAAU,KAAK,QAAQ,KAAK,KAAK,MAAM;AAC1D,iBAAK,WAAW,OAAO,KAAK,KAAK;AAAA,UACnC;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
