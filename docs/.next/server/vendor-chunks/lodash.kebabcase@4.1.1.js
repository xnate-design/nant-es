"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lodash.kebabcase@4.1.1";
exports.ids = ["vendor-chunks/lodash.kebabcase@4.1.1"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/lodash.kebabcase@4.1.1/node_modules/lodash.kebabcase/index.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/.pnpm/lodash.kebabcase@4.1.1/node_modules/lodash.kebabcase/index.js ***!
  \*******************************************************************************************/
/***/ ((module) => {

eval("/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */ /** Used as references for various `Number` constants. */ \nvar INFINITY = 1 / 0;\n/** `Object#toString` result references. */ var symbolTag = \"[object Symbol]\";\n/** Used to match words composed of alphanumeric characters. */ var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n/** Used to match Latin Unicode letters (excluding mathematical operators). */ var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n/** Used to compose unicode character classes. */ var rsAstralRange = \"\\ud800-\\udfff\", rsComboMarksRange = \"\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23\", rsComboSymbolsRange = \"\\\\u20d0-\\\\u20f0\", rsDingbatRange = \"\\\\u2700-\\\\u27bf\", rsLowerRange = \"a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff\", rsMathOpRange = \"\\\\xac\\\\xb1\\\\xd7\\\\xf7\", rsNonCharRange = \"\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf\", rsPunctuationRange = \"\\\\u2000-\\\\u206f\", rsSpaceRange = \" \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000\", rsUpperRange = \"A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde\", rsVarRange = \"\\\\ufe0e\\\\ufe0f\", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n/** Used to compose unicode capture groups. */ var rsApos = \"['’]\", rsBreak = \"[\" + rsBreakRange + \"]\", rsCombo = \"[\" + rsComboMarksRange + rsComboSymbolsRange + \"]\", rsDigits = \"\\\\d+\", rsDingbat = \"[\" + rsDingbatRange + \"]\", rsLower = \"[\" + rsLowerRange + \"]\", rsMisc = \"[^\" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + \"]\", rsFitz = \"\\ud83c[\\udffb-\\udfff]\", rsModifier = \"(?:\" + rsCombo + \"|\" + rsFitz + \")\", rsNonAstral = \"[^\" + rsAstralRange + \"]\", rsRegional = \"(?:\\ud83c[\\udde6-\\uddff]){2}\", rsSurrPair = \"[\\ud800-\\udbff][\\udc00-\\udfff]\", rsUpper = \"[\" + rsUpperRange + \"]\", rsZWJ = \"\\\\u200d\";\n/** Used to compose unicode regexes. */ var rsLowerMisc = \"(?:\" + rsLower + \"|\" + rsMisc + \")\", rsUpperMisc = \"(?:\" + rsUpper + \"|\" + rsMisc + \")\", rsOptLowerContr = \"(?:\" + rsApos + \"(?:d|ll|m|re|s|t|ve))?\", rsOptUpperContr = \"(?:\" + rsApos + \"(?:D|LL|M|RE|S|T|VE))?\", reOptMod = rsModifier + \"?\", rsOptVar = \"[\" + rsVarRange + \"]?\", rsOptJoin = \"(?:\" + rsZWJ + \"(?:\" + [\n    rsNonAstral,\n    rsRegional,\n    rsSurrPair\n].join(\"|\") + \")\" + rsOptVar + reOptMod + \")*\", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = \"(?:\" + [\n    rsDingbat,\n    rsRegional,\n    rsSurrPair\n].join(\"|\") + \")\" + rsSeq;\n/** Used to match apostrophes. */ var reApos = RegExp(rsApos, \"g\");\n/**\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n */ var reComboMark = RegExp(rsCombo, \"g\");\n/** Used to match complex or compound words. */ var reUnicodeWord = RegExp([\n    rsUpper + \"?\" + rsLower + \"+\" + rsOptLowerContr + \"(?=\" + [\n        rsBreak,\n        rsUpper,\n        \"$\"\n    ].join(\"|\") + \")\",\n    rsUpperMisc + \"+\" + rsOptUpperContr + \"(?=\" + [\n        rsBreak,\n        rsUpper + rsLowerMisc,\n        \"$\"\n    ].join(\"|\") + \")\",\n    rsUpper + \"?\" + rsLowerMisc + \"+\" + rsOptLowerContr,\n    rsUpper + \"+\" + rsOptUpperContr,\n    rsDigits,\n    rsEmoji\n].join(\"|\"), \"g\");\n/** Used to detect strings that need a more robust regexp to match words. */ var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n/** Used to map Latin Unicode letters to basic Latin letters. */ var deburredLetters = {\n    // Latin-1 Supplement block.\n    \"\\xc0\": \"A\",\n    \"\\xc1\": \"A\",\n    \"\\xc2\": \"A\",\n    \"\\xc3\": \"A\",\n    \"\\xc4\": \"A\",\n    \"\\xc5\": \"A\",\n    \"\\xe0\": \"a\",\n    \"\\xe1\": \"a\",\n    \"\\xe2\": \"a\",\n    \"\\xe3\": \"a\",\n    \"\\xe4\": \"a\",\n    \"\\xe5\": \"a\",\n    \"\\xc7\": \"C\",\n    \"\\xe7\": \"c\",\n    \"\\xd0\": \"D\",\n    \"\\xf0\": \"d\",\n    \"\\xc8\": \"E\",\n    \"\\xc9\": \"E\",\n    \"\\xca\": \"E\",\n    \"\\xcb\": \"E\",\n    \"\\xe8\": \"e\",\n    \"\\xe9\": \"e\",\n    \"\\xea\": \"e\",\n    \"\\xeb\": \"e\",\n    \"\\xcc\": \"I\",\n    \"\\xcd\": \"I\",\n    \"\\xce\": \"I\",\n    \"\\xcf\": \"I\",\n    \"\\xec\": \"i\",\n    \"\\xed\": \"i\",\n    \"\\xee\": \"i\",\n    \"\\xef\": \"i\",\n    \"\\xd1\": \"N\",\n    \"\\xf1\": \"n\",\n    \"\\xd2\": \"O\",\n    \"\\xd3\": \"O\",\n    \"\\xd4\": \"O\",\n    \"\\xd5\": \"O\",\n    \"\\xd6\": \"O\",\n    \"\\xd8\": \"O\",\n    \"\\xf2\": \"o\",\n    \"\\xf3\": \"o\",\n    \"\\xf4\": \"o\",\n    \"\\xf5\": \"o\",\n    \"\\xf6\": \"o\",\n    \"\\xf8\": \"o\",\n    \"\\xd9\": \"U\",\n    \"\\xda\": \"U\",\n    \"\\xdb\": \"U\",\n    \"\\xdc\": \"U\",\n    \"\\xf9\": \"u\",\n    \"\\xfa\": \"u\",\n    \"\\xfb\": \"u\",\n    \"\\xfc\": \"u\",\n    \"\\xdd\": \"Y\",\n    \"\\xfd\": \"y\",\n    \"\\xff\": \"y\",\n    \"\\xc6\": \"Ae\",\n    \"\\xe6\": \"ae\",\n    \"\\xde\": \"Th\",\n    \"\\xfe\": \"th\",\n    \"\\xdf\": \"ss\",\n    // Latin Extended-A block.\n    \"Ā\": \"A\",\n    \"Ă\": \"A\",\n    \"Ą\": \"A\",\n    \"ā\": \"a\",\n    \"ă\": \"a\",\n    \"ą\": \"a\",\n    \"Ć\": \"C\",\n    \"Ĉ\": \"C\",\n    \"Ċ\": \"C\",\n    \"Č\": \"C\",\n    \"ć\": \"c\",\n    \"ĉ\": \"c\",\n    \"ċ\": \"c\",\n    \"č\": \"c\",\n    \"Ď\": \"D\",\n    \"Đ\": \"D\",\n    \"ď\": \"d\",\n    \"đ\": \"d\",\n    \"Ē\": \"E\",\n    \"Ĕ\": \"E\",\n    \"Ė\": \"E\",\n    \"Ę\": \"E\",\n    \"Ě\": \"E\",\n    \"ē\": \"e\",\n    \"ĕ\": \"e\",\n    \"ė\": \"e\",\n    \"ę\": \"e\",\n    \"ě\": \"e\",\n    \"Ĝ\": \"G\",\n    \"Ğ\": \"G\",\n    \"Ġ\": \"G\",\n    \"Ģ\": \"G\",\n    \"ĝ\": \"g\",\n    \"ğ\": \"g\",\n    \"ġ\": \"g\",\n    \"ģ\": \"g\",\n    \"Ĥ\": \"H\",\n    \"Ħ\": \"H\",\n    \"ĥ\": \"h\",\n    \"ħ\": \"h\",\n    \"Ĩ\": \"I\",\n    \"Ī\": \"I\",\n    \"Ĭ\": \"I\",\n    \"Į\": \"I\",\n    \"İ\": \"I\",\n    \"ĩ\": \"i\",\n    \"ī\": \"i\",\n    \"ĭ\": \"i\",\n    \"į\": \"i\",\n    \"ı\": \"i\",\n    \"Ĵ\": \"J\",\n    \"ĵ\": \"j\",\n    \"Ķ\": \"K\",\n    \"ķ\": \"k\",\n    \"ĸ\": \"k\",\n    \"Ĺ\": \"L\",\n    \"Ļ\": \"L\",\n    \"Ľ\": \"L\",\n    \"Ŀ\": \"L\",\n    \"Ł\": \"L\",\n    \"ĺ\": \"l\",\n    \"ļ\": \"l\",\n    \"ľ\": \"l\",\n    \"ŀ\": \"l\",\n    \"ł\": \"l\",\n    \"Ń\": \"N\",\n    \"Ņ\": \"N\",\n    \"Ň\": \"N\",\n    \"Ŋ\": \"N\",\n    \"ń\": \"n\",\n    \"ņ\": \"n\",\n    \"ň\": \"n\",\n    \"ŋ\": \"n\",\n    \"Ō\": \"O\",\n    \"Ŏ\": \"O\",\n    \"Ő\": \"O\",\n    \"ō\": \"o\",\n    \"ŏ\": \"o\",\n    \"ő\": \"o\",\n    \"Ŕ\": \"R\",\n    \"Ŗ\": \"R\",\n    \"Ř\": \"R\",\n    \"ŕ\": \"r\",\n    \"ŗ\": \"r\",\n    \"ř\": \"r\",\n    \"Ś\": \"S\",\n    \"Ŝ\": \"S\",\n    \"Ş\": \"S\",\n    \"Š\": \"S\",\n    \"ś\": \"s\",\n    \"ŝ\": \"s\",\n    \"ş\": \"s\",\n    \"š\": \"s\",\n    \"Ţ\": \"T\",\n    \"Ť\": \"T\",\n    \"Ŧ\": \"T\",\n    \"ţ\": \"t\",\n    \"ť\": \"t\",\n    \"ŧ\": \"t\",\n    \"Ũ\": \"U\",\n    \"Ū\": \"U\",\n    \"Ŭ\": \"U\",\n    \"Ů\": \"U\",\n    \"Ű\": \"U\",\n    \"Ų\": \"U\",\n    \"ũ\": \"u\",\n    \"ū\": \"u\",\n    \"ŭ\": \"u\",\n    \"ů\": \"u\",\n    \"ű\": \"u\",\n    \"ų\": \"u\",\n    \"Ŵ\": \"W\",\n    \"ŵ\": \"w\",\n    \"Ŷ\": \"Y\",\n    \"ŷ\": \"y\",\n    \"Ÿ\": \"Y\",\n    \"Ź\": \"Z\",\n    \"Ż\": \"Z\",\n    \"Ž\": \"Z\",\n    \"ź\": \"z\",\n    \"ż\": \"z\",\n    \"ž\": \"z\",\n    \"Ĳ\": \"IJ\",\n    \"ĳ\": \"ij\",\n    \"Œ\": \"Oe\",\n    \"œ\": \"oe\",\n    \"ŉ\": \"'n\",\n    \"ſ\": \"ss\"\n};\n/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == \"object\" && global && global.Object === Object && global;\n/** Detect free variable `self`. */ var freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\n/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function(\"return this\")();\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */ function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1, length = array ? array.length : 0;\n    if (initAccum && length) {\n        accumulator = array[++index];\n    }\n    while(++index < length){\n        accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n}\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */ function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n}\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */ function basePropertyOf(object) {\n    return function(key) {\n        return object == null ? undefined : object[key];\n    };\n}\n/**\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n */ var deburrLetter = basePropertyOf(deburredLetters);\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */ function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n}\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */ function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n}\n/** Used for built-in method references. */ var objectProto = Object.prototype;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var objectToString = objectProto.toString;\n/** Built-in value references. */ var Symbol = root.Symbol;\n/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */ function baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == \"string\") {\n        return value;\n    }\n    if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : \"\";\n    }\n    var result = value + \"\";\n    return result == \"0\" && 1 / value == -INFINITY ? \"-0\" : result;\n}\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */ function createCompounder(callback) {\n    return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, \"\")), callback, \"\");\n    };\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */ function isObjectLike(value) {\n    return !!value && typeof value == \"object\";\n}\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */ function isSymbol(value) {\n    return typeof value == \"symbol\" || isObjectLike(value) && objectToString.call(value) == symbolTag;\n}\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */ function toString(value) {\n    return value == null ? \"\" : baseToString(value);\n}\n/**\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * _.deburr('déjà vu');\n * // => 'deja vu'\n */ function deburr(string) {\n    string = toString(string);\n    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, \"\");\n}\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */ var kebabCase = createCompounder(function(result, word, index) {\n    return result + (index ? \"-\" : \"\") + word.toLowerCase();\n});\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */ function words(string, pattern, guard) {\n    string = toString(string);\n    pattern = guard ? undefined : pattern;\n    if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n    }\n    return string.match(pattern) || [];\n}\nmodule.exports = kebabCase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/lodash.kebabcase@4.1.1/node_modules/lodash.kebabcase/index.js\n");

/***/ })

};
;