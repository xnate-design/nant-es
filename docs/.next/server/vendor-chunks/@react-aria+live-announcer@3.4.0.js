"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@react-aria+live-announcer@3.4.0";
exports.ids = ["vendor-chunks/@react-aria+live-announcer@3.4.0"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@react-aria+live-announcer@3.4.0/node_modules/@react-aria/live-announcer/dist/LiveAnnouncer.mjs":
/*!*****************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@react-aria+live-announcer@3.4.0/node_modules/@react-aria/live-announcer/dist/LiveAnnouncer.mjs ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   announce: () => (/* binding */ $319e236875307eab$export$a9b970dcc4ae71a9),\n/* harmony export */   clearAnnouncer: () => (/* binding */ $319e236875307eab$export$d10ae4f68404609a),\n/* harmony export */   destroyAnnouncer: () => (/* binding */ $319e236875307eab$export$d8686216b8b81b2f)\n/* harmony export */ });\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /* Inspired by https://github.com/AlmeroSteyn/react-aria-live */ const $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY = 7000;\nlet $319e236875307eab$var$liveAnnouncer = null;\nfunction $319e236875307eab$export$a9b970dcc4ae71a9(message, assertiveness = \"assertive\", timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {\n    if (!$319e236875307eab$var$liveAnnouncer) {\n        $319e236875307eab$var$liveAnnouncer = new $319e236875307eab$var$LiveAnnouncer();\n        // wait for the live announcer regions to be added to the dom, then announce\n        // otherwise Safari won't announce the message if it's added too quickly\n        // found most times less than 100ms were not consistent when announcing with Safari\n        // IS_REACT_ACT_ENVIRONMENT is used by React 18. Previous versions checked for the `jest` global.\n        // https://github.com/reactwg/react-18/discussions/102\n        // if we're in a test environment, announce without waiting\n        // @ts-ignore\n        if (!(typeof IS_REACT_ACT_ENVIRONMENT === \"boolean\" ? IS_REACT_ACT_ENVIRONMENT : typeof jest !== \"undefined\")) setTimeout(()=>{\n            if ($319e236875307eab$var$liveAnnouncer === null || $319e236875307eab$var$liveAnnouncer === void 0 ? void 0 : $319e236875307eab$var$liveAnnouncer.isAttached()) $319e236875307eab$var$liveAnnouncer === null || $319e236875307eab$var$liveAnnouncer === void 0 ? void 0 : $319e236875307eab$var$liveAnnouncer.announce(message, assertiveness, timeout);\n        }, 100);\n        else $319e236875307eab$var$liveAnnouncer.announce(message, assertiveness, timeout);\n    } else $319e236875307eab$var$liveAnnouncer.announce(message, assertiveness, timeout);\n}\nfunction $319e236875307eab$export$d10ae4f68404609a(assertiveness) {\n    if ($319e236875307eab$var$liveAnnouncer) $319e236875307eab$var$liveAnnouncer.clear(assertiveness);\n}\nfunction $319e236875307eab$export$d8686216b8b81b2f() {\n    if ($319e236875307eab$var$liveAnnouncer) {\n        $319e236875307eab$var$liveAnnouncer.destroy();\n        $319e236875307eab$var$liveAnnouncer = null;\n    }\n}\n// LiveAnnouncer is implemented using vanilla DOM, not React. That's because as of React 18\n// ReactDOM.render is deprecated, and the replacement, ReactDOM.createRoot is moved into a\n// subpath import `react-dom/client`. That makes it hard for us to support multiple React versions.\n// As a global API, we can't use portals without introducing a breaking API change. LiveAnnouncer\n// is simple enough to implement without React, so that's what we do here.\n// See this discussion for more details: https://github.com/reactwg/react-18/discussions/125#discussioncomment-2382638\nclass $319e236875307eab$var$LiveAnnouncer {\n    isAttached() {\n        var _this_node;\n        return (_this_node = this.node) === null || _this_node === void 0 ? void 0 : _this_node.isConnected;\n    }\n    createLog(ariaLive) {\n        let node = document.createElement(\"div\");\n        node.setAttribute(\"role\", \"log\");\n        node.setAttribute(\"aria-live\", ariaLive);\n        node.setAttribute(\"aria-relevant\", \"additions\");\n        return node;\n    }\n    destroy() {\n        if (!this.node) return;\n        document.body.removeChild(this.node);\n        this.node = null;\n    }\n    announce(message, assertiveness = \"assertive\", timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {\n        var _this_assertiveLog, _this_politeLog;\n        if (!this.node) return;\n        let node = document.createElement(\"div\");\n        if (typeof message === \"object\") {\n            // To read an aria-labelledby, the element must have an appropriate role, such as img.\n            node.setAttribute(\"role\", \"img\");\n            node.setAttribute(\"aria-labelledby\", message[\"aria-labelledby\"]);\n        } else node.textContent = message;\n        if (assertiveness === \"assertive\") (_this_assertiveLog = this.assertiveLog) === null || _this_assertiveLog === void 0 ? void 0 : _this_assertiveLog.appendChild(node);\n        else (_this_politeLog = this.politeLog) === null || _this_politeLog === void 0 ? void 0 : _this_politeLog.appendChild(node);\n        if (message !== \"\") setTimeout(()=>{\n            node.remove();\n        }, timeout);\n    }\n    clear(assertiveness) {\n        if (!this.node) return;\n        if ((!assertiveness || assertiveness === \"assertive\") && this.assertiveLog) this.assertiveLog.innerHTML = \"\";\n        if ((!assertiveness || assertiveness === \"polite\") && this.politeLog) this.politeLog.innerHTML = \"\";\n    }\n    constructor(){\n        this.node = null;\n        this.assertiveLog = null;\n        this.politeLog = null;\n        if (typeof document !== \"undefined\") {\n            this.node = document.createElement(\"div\");\n            this.node.dataset.liveAnnouncer = \"true\";\n            // copied from VisuallyHidden\n            Object.assign(this.node.style, {\n                border: 0,\n                clip: \"rect(0 0 0 0)\",\n                clipPath: \"inset(50%)\",\n                height: \"1px\",\n                margin: \"-1px\",\n                overflow: \"hidden\",\n                padding: 0,\n                position: \"absolute\",\n                width: \"1px\",\n                whiteSpace: \"nowrap\"\n            });\n            this.assertiveLog = this.createLog(\"assertive\");\n            this.node.appendChild(this.assertiveLog);\n            this.politeLog = this.createLog(\"polite\");\n            this.node.appendChild(this.politeLog);\n            document.body.prepend(this.node);\n        }\n    }\n}\n //# sourceMappingURL=LiveAnnouncer.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@react-aria+live-announcer@3.4.0/node_modules/@react-aria/live-announcer/dist/LiveAnnouncer.mjs\n");

/***/ })

};
;